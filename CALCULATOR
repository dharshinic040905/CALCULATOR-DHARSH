#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#define MAX 100
typedef struct Stack { int items[MAX]; int top; } Stack; void initialize(Stack *stack) { stack->top = -1; } bool isEmpty(Stack *stack) { return stack->top == -1;
} bool isFull(Stack *stack) { return stack->top == MAX - 1;
} void push(Stack *stack, int item) { if (isFull(stack)) { printf("Stack is full\n"); return; } stack->items[++stack->top] = item;
} int pop(Stack *stack) { if (isEmpty(stack)) { printf("Stack is empty\n"); return -1; } return stack->items[stack->top--];
} int peek(Stack *stack) { if (isEmpty(stack)) { printf("Stack is empty\n"); return -1; } return stack->items[stack->top];
}
bool isOperator(char ch) { return ch == '+' || ch == '-' || ch == '*' || ch == '/';
} int precedence(char op) { switch (op) { case '+':
case '-':
return 1; case '*':
case '/':
return 2; } return 0; } void infixToPostfix(char* infix, char* postfix) { Stack stack; initialize(&stack);
int j = 0;
for (int i = 0; infix[i] != '\0'; i++) { if (isdigit(infix[i])) { postfix[j++] = infix[i];
} else if (infix[i] == '(') { push(&stack, infix[i]);
} else if (infix[i] == ')') { while (!isEmpty(&stack) && peek(&stack) != '(') { postfix[j++] = pop(&stack);
} pop(&stack); // Pop '('
} else if (isOperator(infix[i])) {
	while	(!isEmpty(&stack)	&&	precedence(peek(&stack))	>=
precedence(infix[i])) {
postfix[j++] = pop(&stack);
} push(&stack, infix[i]);
} }
while (!isEmpty(&stack)) { postfix[j++] = pop(&stack);
}
postfix[j] = '\0';
} int evaluatePostfix(char* postfix) { Stack stack; initialize(&stack); for (int i = 0; postfix[i] != '\0'; i++) { if (isdigit(postfix[i])) { push(&stack, postfix[i] - '0');
} else if (isOperator(postfix[i])) { int val2 = pop(&stack); int val1 = pop(&stack); switch (postfix[i]) { case '+':
push(&stack, val1 + val2); break; case '-':
push(&stack, val1 - val2); break; case '*':
push(&stack, val1 * val2); break; case '/':
push(&stack, val1 / val2); break;
}
} } return pop(&stack);
} int main() { char infix[MAX] = "3+(2*4)-9"; // Example infix expression char postfix[MAX]; infixToPostfix(infix, postfix); printf("Infix Expression: %s\n", infix); printf("Postfix Expression: %s\n", postfix); int result = evaluatePostfix(postfix); printf("Result: %d\n", result); return 0;
}
